<?php

/*
 * Uncurses, The usable 'ncurses for php' interface
 *
 * Copyright (c) 2013-2015, Armond B. Carroll III, ben@hl9.net
 * This file is a part of the Uncurses Library.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. No one other than the copyright holder, listed above, has the right to
 *    modify the terms applicable to covered code created under this License.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 *
 * This file includes textual descriptions and prototype names, many verbatim
 * from the PHP Manual, which are (c) The PHP Documentation Group, and covered
 * under the Creative Commons Attribution 3.0 License.  The author claims no
 * ownership of such material, and also extends a huge thanks the PHP
 * Documentation Group for their work.
 */

namespace Uncurses;

/**
 * Class Window
 * @package Uncurses
 */
class Window {
    private $uncurses, $window;

    /**
     * Creates a new window within ncurses.  You should not call new Window(...) directly, but instead use Uncurses::newWindow() so that tracking can occur.
     *
     * @param int $width  The width of the new window.
     * @param int $height The height of the new window.
     * @param int $x      The x position (column) of the new window.
     * @param int $y      The y position (row) of the new window.
     */
    public function __construct($uncurses, $width, $height, $x, $y) {
        // TODO error checking..duh
        $this->window = ncurses_newwin($width, $height, $y, $x);

        return $this;
    }


    /**
     * Returns the raw 'ncurses for php' window resource.  This method should be avoided if possible, and instead improve Uncurses so it is not necessary.
     *
     * @return resource The raw php-ncurses window resource.
     */
    public function getWindowResource() {
        return $this->window;
    }

    /**
     * int ncurses_wrefresh (resource $window) - Refresh window on terminal screen
     * @TODO: Proper error handling
     *
     * @return bool
     */
    public function refresh() {
        return ncurses_wrefresh($this->window);
    }


    /* * * * * * * * * * * * * * * * * * * * * * * * * * *
     * inopts(3NCURSES) related methods
     *
     * TODO: It looks like php is missing the int nodelay(WINDOW *win, bool bf) ncurses function, as well as intrflush(WINDOW *win, bool bf), however intrflush
     * may just be deprecated, as qifflush() in the Uncurses class looks to be the same thing.
     */

    /**
     * int ncurses_keypad (resource $window , bool $bf) - Turns keypad on or off
     *
     * @param $window
     * @param $bf
     *
     * @return int
     */
    public function keypad($enabled) {
        return ncurses_keypad($this->window, $enabled);
    }

    /**
     * int ncurses_meta (resource $window , bool $8bit) - Enables/Disable 8-bit meta key information
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $window
     * @param $eightbit
     *
     * @return int
     */
    public function meta($eightbit) {
        return ncurses_meta($this->window, $eightbit);
    }

    /* * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Size and position related methods
     */

    /**
     * void ncurses_getmaxyx (resource $window , int &$y , int &$x) - Returns the size of a window
     *
     * @param $window
     *
     * @return array
     */
    public function getmaxyx() {
        ncurses_getmaxyx($this->window, $y, $x);

        return array(
            0   => true,
            'y' => $y,
            'x' => $x
        );
    }


    /**
     * New function
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $window
     *
     * @return mixed
     */
    public function getmaxx() { // STDSCR? 
        $value = $this->getmaxyx($this->window);

        return $value['x'];
    }

    /**
     * New function
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $window
     *
     * @return mixed
     */
    public function getmaxy() { // STDSCR? 
        $value = $this->getmaxyx($this->window);

        return $value['y'];
    }

    /**
     * void ncurses_getyx (resource $window , int &$y , int &$x) - Returns the current cursor position for a window
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $window
     *
     * @return array
     */
    public function getyx() { // STDSCR? 
        ncurses_getyx($this->window, $y, $x);

        return array(
            0   => true,
            'y' => $y,
            'x' => $x,
        );
    }

    /* * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Adding characters and strings to the window
     */

    /**
     * int ncurses_waddstr (resource $window , string $str [, int $n ]) - Outputs text at current postion in window
     *
     * @param $window
     * @param $str
     * @param $n
     *
     * @return int
     */
    public function addStr($str, $n = null) { // is $n suppose to be null or -1 for the default value?
        // @TODO this function doesn't work at all in my sample, and I have no earthly idea why..
        return ncurses_waddstr($this->window, $str, $n);
    }

    /**
     * int ncurses_waddch (resource $window , int $ch) - Adds character at current position in a window and advance cursor
     *
     * @param $window
     * @param $ch
     *
     * @return int
     */
    public function addChar($ch) {
        return ncurses_waddch($this->window, $ch);
    }

    /**
     * int ncurses_mvwaddstr (resource $window , int $y , int $x , string $text) - Add string at new position in window
     *
     * @param $window
     * @param $y
     * @param $x
     * @param $text
     *
     * @return int
     */
    public function addStrPos($x, $y, $text) {
        return ncurses_mvwaddstr($this->window, $y, $x, $text);
    }

    /* * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Panel related methods
     */

    /**
     * resource ncurses_new_panel (resource $window) - Create a new panel and associate it with window
     *
     * @param $window
     *
     * @return resource
     */
    public function new_panel() { // STDSCR? 
        return ncurses_new_panel($this->window);
    }

    /*
     * Attribute related functions
     */

    /**
     * int ncurses_wattroff (resource $window , int $attrs) - Turns off attributes for a window
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $window
     * @param $attrs
     *
     * @return int
     */
    public function wattroff($attrs) {
        return ncurses_wattroff($this->window, $attrs);
    }

    /**
     * int ncurses_wattron (resource $window , int $attrs) - Turns on attributes for a window
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $window
     * @param $attrs
     *
     * @return int
     */
    public function wattron($attrs) {
        return ncurses_wattron($this->window, $attrs);
    }

    /**
     * int ncurses_wattrset (resource $window , int $attrs) - Set the attributes for a window
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $window
     * @param $attrs
     *
     * @return int
     */
    public function wattrset($attrs) {
        return ncurses_wattrset($this->window, $attrs);
    }

    /*
     * Misc / Uncategorized methods
     */

    /**
     * int ncurses_wborder (resource $window , int $left , int $right , int $top , int $bottom , int $tl_corner , int $tr_corner , int $bl_corner , int
     * $br_corner) - Draws a border around the window using attributed characters
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $window
     * @param $left
     * @param $right
     * @param $top
     * @param $bottom
     * @param $tl_corner
     * @param $tr_corner
     * @param $bl_corner
     * @param $br_corner
     *
     * @return int
     */
    public function addBorder($left, $right, $top, $bottom, $tl_corner, $tr_corner, $bl_corner, $br_corner) {
        return ncurses_wborder($this->window, $left, $right, $top, $bottom, $tl_corner, $tr_corner, $bl_corner, $br_corner);
    }

    /**
     * int ncurses_wclear (resource $window) - Clears window
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $window
     *
     * @return int
     */
    public function clear() {
        return ncurses_wclear($this->window);
    }

    /**
     * int ncurses_wcolor_set (resource $window , int $color_pair) - Sets windows color pairings
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $window
     * @param $color_pair
     *
     * @return int
     */
    public function colorSet($color_pair) {
        return ncurses_wcolor_set($this->window, $color_pair);
    }

    /**
     * int ncurses_werase (resource $window) - Erase window contents
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $window
     *
     * @return int
     */
    public function erase() {
        return ncurses_werase($this->window);
    }

    /**
     * int ncurses_wgetch (resource $window) - Reads a character from keyboard (window)
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $window
     *
     * @return int
     */
    public function getch() {
        return ncurses_wgetch($this->window);
    }

    /**
     * int ncurses_whline (resource $window , int $charattr , int $n) - Draws a horizontal line in a window at current position using an attributed character
     * and max. n characters long
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $window
     * @param $charattr
     * @param $n
     *
     * @return int
     */
    public function horizontalLine($charattr, $n) {
        return ncurses_whline($this->window, $charattr, $n);
    }

    /**
     * int ncurses_wvline (resource $window , int $charattr , int $n) - Draws a vertical line in a window at current position using an attributed character and
     * max. n characters long
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $window
     * @param $charattr
     * @param $n
     *
     * @return int
     */
    public function verticalLine($charattr, $n) {
        return ncurses_wvline($this->window, $charattr, $n);
    }

    /**
     * bool ncurses_wmouse_trafo (resource $window , int &$y , int &$x , bool $toscreen) - Transforms window/stdscr coordinates
     *
     * DD See notes on uncurses::mouse_trafo()
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $window
     * @param $y
     * @param $x
     * @param $toscreen
     *
     * @return array
     */
    public function mouse_trafo($y, $x, $toscreen) {
        $return_value = ncurses_wmouse_trafo($this->window, $y, $x, $toscreen);

        return array(
            'return' => $return_value,
            'y'      => $y,
            'x'      => $x,
        );
    }

    /**
     * int ncurses_wmove (resource $window , int $y , int $x) - Moves windows output position
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $window
     * @param $y
     * @param $x
     *
     * @return int
     */
    public function move($y, $x) { // moveCursor?
        return ncurses_wmove($this->window, $y, $x);
    }

    /**
     * int ncurses_wnoutrefresh (resource $window) - Copies window to virtual screen
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $window
     *
     * @return int
     */
    public function noutrefresh() {
        return ncurses_wnoutrefresh($this->window);
    }

    /**
     * int ncurses_wstandend (resource $window) - End standout mode for a window
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $window
     *
     * @return int
     */
    public function standend() {
        return ncurses_wstandend($this->window);
    }

    /**
     * int ncurses_wstandout (resource $window) - Enter standout mode for a window
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $window
     *
     * @return int
     */
    public function standout() {
        return ncurses_wstandout($this->window);
    }


}