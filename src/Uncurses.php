<?php

/*
 * Uncurses, The usable 'ncurses for php' interface
 *
 * Copyright (c) 2013-2015, Armond B. Carroll III, ben@hl9.net
 * This file is a part of the Uncurses Library.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. No one other than the copyright holder, listed above, has the right to
 *    modify the terms applicable to covered code created under this License.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 *
 * This file includes textual descriptions and prototype names, many verbatim
 * from the PHP Manual, which are (c) The PHP Documentation Group, and covered
 * under the Creative Commons Attribution 3.0 License.  The author claims no
 * ownership of such material, and also extends a huge thanks the PHP
 * Documentation Group for their work.
 */

namespace Uncurses;

/**
 * Class Uncurses
 * @package Uncurses
 */
class Uncurses {
    private $windowList;

    /*
     * Default options for the Uncurses object. These are all inopts, see man 3CURSES inopts for more in-depth information regarding them.  This is done
     * particularly because cbreak, keypad, and ... options are inherited from the tty, so this is an attempt to keep the behavior of Uncurses applications
     * consistent across different tty's and platforms.
     */
    private $options = [], $defaultOptions = [
        'echo'             => false,
        'waitForReturnKey' => false,
        'raw'              => false,
    ];

    /**
     * This is to be used by program authors to print a prettier error message, and perhaps installation instructions, if the user is lacking the necessary
     * extensions to use Uncurses, namely the PHP ncurses extension.
     *
     * @return bool true if the user has the necessary extensions and is able to run Uncurses, false if not.
     */
    public static function hasExtension() {
        if(function_exists('ncurses_init')) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Constructs an uncurses object.
     */
    public function __construct($options = array()) {
        if(!self::hasExtension()) {
            throw new \ErrorException("You need the ncurses PHP extension to use uncurses");
        }

        // void ncurses_init (void) - Initialize ncurses
        ncurses_init();

        // Merge the local options over the default options
        $this->options = array_merge($this->defaultOptions, $options);

        foreach($this->options as $optKey => $optVal) {
            switch($optKey) {
                case 'echo':
                    $this->setEchoMode($optVal);
                    break;
                case 'waitForReturnKey':
                    $this->setReturnKeyBufferMode($optVal);
                    break;
                case 'raw':
                    break;

            }

        }

    }

    /**
     * Called when the uncurses object is destroyed.  The screen will be cleaned up.
     *
     * @throws \ErrorException
     */
    public function __destruct() {
        // int ncurses_end (void) - Stop using ncurses, clean up the screen
        $op = ncurses_end();
        if($op !== 0) {
            throw new \ErrorException("Could not clean up Uncurses, maybe something bad happened to the terminal?");
        }
    }

    /* * * * * * * * * * * * * * * * * * * * * * * * * * *
     * inopts(3NCURSES) related methods.
     *
     * TODO: There are several methods here that are still in their original state, and need to be updated for consistency.
     */

    /**
     * Enables or disables the local keyboard echo. The echo generated by the local tty is always disabled, so even when this is is enabled, getch()-like
     * methods still capture the input.  This only determines if you wish the output at the current cursor position to be automatic or not.
     * See the inopts(3NCURSES) manual page for a more in-depth discussion.
     *
     * @param bool $enabled
     *
     * @return bool
     * @throws \ErrorException
     */
    public function setEchoMode($enabled) {
        if($enabled == true) {
            $op = ncurses_echo();
        } else {
            $op = ncurses_noecho();
        }

        if($op !== 0) {
            throw new \ErrorException("Could not change Uncurses's echo mode.", $op);
        } else {
            return true;
        }
    }

    /**
     * Enables or disables the input buffer.  Normally in applications, the input is buffered until the return key is pressed.  Setting this to false (the
     * default) will disable that buffer making key presses immedaitely available to the application via getch()-like methods.  When enabled, input will
     * be buffered until the return key is pressed, and then made to getch()-like methods. Note that this will directly conflict with setRawMode().
     * See the inopts(3NCURSES) manual page for a more in-depth discussion.  Disabling this is sometimes called "cooked mode" in ncurses documentation.
     *
     * @param bool $enabled True to enable buffering until a return key is pressed, false to make key presses immediately available.
     *
     * @return bool Returns true if successfully set, and throws an exception on failure.
     * @throws \ErrorException
     */
    public function setReturnKeyBufferMode($enabled) {
        if($enabled == true) {
            $op = ncurses_nocbreak();
        } else {
            $op = ncurses_cbreak();
        }

        if($op !== 0) {
            throw new \ErrorException("Could not change Uncurses's return key wait mode.", $op);
        } else {
            return true;
        }
    }

    /**
     * Raw mode is very similar to disableing return key buffering with setReturnKeyBufferMode(), however the difference, to quote the ncurses manually almost
     * verbatim, is that the difference is "in raw mode, the interrupt, quit, suspend, and flow control characters are all passed through uninterpreted,
     * instead of generating a signal."  See the inopts(3NCURSES) manual page for a more in-depth discussion.
     *
     * @param bool $enabled True to enable raw mode, false to disable it.
     *
     * @return bool Returns true if successfully set, and throws an exception on failure.
     * @throws \ErrorException
     */
    public function setRawMode($enabled) {
        if($enabled == true) {
            $op = ncurses_nocbreak();
        } else {
            $op = ncurses_cbreak();
        }

        if($op !== 0) {
            throw new \ErrorException("Could not change Uncurses's raw mode.", $op);
        } else {
            return true;
        }
    }

    /**
     * int ncurses_halfdelay (int $tenth) - Put terminal into halfdelay mode
     *
     * @param $tenth
     *
     * @return int
     */
    public function halfdelay($tenth) {
        return ncurses_halfdelay($tenth);
    }

    /**
     * void ncurses_qiflush (void) - Flush on signal characters
     */
    public function qiflush() {
        return ncurses_qiflush();
    }

    /**
     * void ncurses_noqiflush (void) - Do not flush on signal characters
     */
    public function noqiflush() {
        return ncurses_noqiflush();
    }

    /**
     * void ncurses_timeout (int $millisec) - Set timeout for special key sequences
     * @TODO: The ncurses library has a notimeout() function, I'm assuming this isn't necessary because we can set $millisec to 0 to achieve the same result?
     *
     * @param $millisec
     */
    public function timeout($millisec) {
        return ncurses_timeout($millisec);
    }

    /**
     * int ncurses_typeahead (int $fd) - Specify different filedescriptor for typeahead checking
     *
     * @param $fd
     *
     * @return int
     */
    public function typeahead($fd) {
        return ncurses_typeahead($fd);
    }

    /* * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Window control code
     */

    /**
     * Creates a new window within ncurses.  Specifying zero for the width and height forces the window to take up the entire screen.
     *
     * @param int        $width       The width of the new window.
     * @param int        $height      The height of the new window.
     * @param int        $x           The x position (column) of the new window.
     * @param int        $y           The y position (row) of the new window.
     * @param string|int $windowAlias A number or string to reference the window later on with.
     *
     * @return \Uncurses\Window
     */
    public function newWindow($width, $height, $x, $y, $windowAlias = null) {
        $newWindow = new \Uncurses\Window($this, $width, $height, $x, $y);
        if($windowAlias === null) {
            $this->windowList[] = $newWindow;
        } else {
            $this->windowList[$windowAlias] = $newWindow;
        }

        return $newWindow;
    }

    /**
     * bool ncurses_delwin (resource $window) - Delete a ncurses window
     *
     * @param $windowAlias
     *
     * @return bool
     * @throws \ErrorException Throws an \ErrorException if the window does not exist or is the parent of another window.
     */
    public function removeWindow($windowAlias) {
        unset($this->windowList[$windowAlias]);
        $op = ncurses_delwin($this->windowList[$windowAlias]);

        if($op !== 0) {
            throw new \ErrorException("Couldn't remove window with alias '$windowAlias', check that it exists and isn't the parent of another window");
        } else {
            return true;
        }
    }

    public function getWindowList() {
        return $this->windowList;
    }

    public function windowCount() {
        return count($this->windowList);
    }

    public function hasWindow($windowAlias) {
        return isset($this->windowList[$windowAlias]);
    }

    /**
     * Beep and Flash Methods
     */

    /**
     * Let the terminal beep (audible bell).  If a beep isn't possible, it may flash (visual bell) instead.  If neither are possible, it does nothing.
     * @TODO Appropriate error handling
     *
     * @return bool
     */
    public function beep() {
        return ncurses_beep();
    }

    /**
     * Let the terminal flash (visual bell).  If a flash isn't possible, it may beep (audible bell) instead.  If neither are possible, it does nothing.
     * @TODO Appropriate error handling
     *
     * @return bool
     */
    public function flash() {
        return ncurses_flash();
    }

    /*****************************************************************************
     * End tested code.                                                          *
     * The code following is totally untested, and is mostly auto-generated code.*
     *****************************************************************************/

    /**
     * RR Returns TRUE on success or FALSE on failure.
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * Add character at current position and advance cursor.
     * Adds a character, specified as the integer $ascii, to the current cursor position, and advances the cursor.  If the cursor reaches the end of the
     * row, it will wrap around to the next row.  Some non-printing control characters have special meaning, see addstr() for those meanings.
     * Original Prototype: int ncurses_addch (int $ch)
     *
     * @param string $ascii The ASCII character to add
     * @param bool   $y
     * @param bool   $x
     *
     * @return bool Returns true on success, or false on failure.
     */
    public function addch($ascii, $y = false, $x = false) {
        if($y === false || $x === false) {
            $return_value = ncurses_addch($ascii);
        } else {
            $return_value = ncurses_mvaddch($ascii, $y, $x);
        }

        if($return_value === 0) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * int ncurses_addchstr (string $s) - Add attributed string at current position
     *
     * DD I couldn't get this function to do anything.  See the ncurses man pages.  If anyone has a working example of this function, I would like to see it.
     *
     * RR Returns TRUE on success or FALSE on failure.
     *
     * @param      $s
     * @param bool $y
     * @param bool $x
     *
     * @return bool
     */
    public function addchstr($s, $y = false, $x = false) {
        if($y === false || $x === false) {
            $return_value = ncurses_addchstr($s);
        } else {
            $return_value = ncurses_mvaddchstr($s, $y, $x);
        }

        if($return_value === 0) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * int ncurses_addstr (string $text) - Output text at current position
     *
     * SS true,fale (string $text)
     *
     * DD Outputs a string specified by //$text// at the current cursor position, and advances the cursor.  If the cursor reaches the end of the row, it will
     * wrap around to the next row.   Some non-printing control characters have special meaning:
     *
     * DD * A backspace moves the cursor one column left, if it as the left edge of the screen already, it does nothing
     *
     * DD * A newline clears the rest of the row to the right edge of the screen, and then moving the cursor to the first column of the next line
     *
     * DD * Any other non-printing control characters will be printed in //^X// notation.
     *
     * RR Returns TRUE on success or FALSE on failure.
     *
     * @param      $text
     * @param bool $y
     * @param bool $x
     *
     * @return bool
     */
    public function addstr($text, $y = false, $x = false) {
        if($y === false || $x === false) {
            $return_value = ncurses_addstr($text);
        } else {
            $return_value = ncurses_mvaddstr($text, $y, $x);
        }

        if($return_value === 0) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * int ncurses_assume_default_colors (int $fg , int $bg) - Define default colors for color
     *
     * SS true,false (int $fg_pair, int $bg_pair)
     *
     * DD Specify what background and foreground colors to use for color pair `0`.  You may also specify the special paramters `-1, -1` which signifies to
     * reset to default terminal colors, and is also exactly equivilant to `uncurses::use_default_colors()``.  According to default_colors (3X), "This function
     * will fail if either the terminal does not support the orig_pair or orig_colors capability. If the initialize_pair capability is found, this causes an
     * error as well. "
     *
     * RR Returns TRUE on success or FALSE on failure.
     *
     * @param $fg
     * @param $bg
     *
     * @return bool
     */
    public function assume_default_colors($fg, $bg) {
        if(ncurses_assume_default_colors($fg, $bg) === 0) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * int ncurses_attroff (int $attributes) - Turn off the given attributes
     *
     * RR Returns TRUE on success or FALSE on failure.
     *
     * @param $attributes
     *
     * @return bool
     */
    public function attroff($attributes) {
        if(ncurses_attroff($attributes) === 0) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * int ncurses_attron (int $attributes) - Turn on the given attributes
     *
     * RR Returns TRUE on success or FALSE on failure.
     *
     * @param $attributes
     *
     * @return bool
     */
    public function attron($attributes) {
        if(ncurses_attron($attributes) === 0) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * int ncurses_attrset (int $attributes) - Set given attributes
     *
     * RR Returns TRUE on success or FALSE on failure.
     *
     * @param $attributes
     *
     * @return bool
     */
    public function attrset($attributes) {
        if(ncurses_attrset($attributes) === 0) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * int ncurses_baudrate (void) - Returns baudrate of terminal
     *
     * SS int (void)
     *
     * RR Returns the current baud rate of the terminal as an integer.  For example, __38400__.
     *
     * @return int
     */
    public function baudrate() {
        return ncurses_baudrate();
    }

    /**
     * int ncurses_bkgd (int $attrchar) - Set background property for terminal screen
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * RR bkgd() will seemingly always return `true`, unless ncurses hasn't been initialized.
     *
     * @param $attrchar
     *
     * @return bool
     */
    public function bkgd($attrchar) {
        if(ncurses_bkgd($attrchar) === 0) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * void ncurses_bkgdset (int $attrchar) - Control screen background
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $attrchar
     *
     * @return bool bkgd() will seemingly always return `true`, unless ncurses hasn't been initialized.
     */
    public function bkgdset($attrchar) {
        if(ncurses_bkgdset($attrchar) === 0) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * int ncurses_border (int $left , int $right , int $top , int $bottom , int $tl_corner , int $tr_corner , int $bl_corner , int $br_corner) - Draw a border
     * around the screen using attributed characters
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $left
     * @param $right
     * @param $top
     * @param $bottom
     * @param $tl_corner
     * @param $tr_corner
     * @param $bl_corner
     * @param $br_corner
     *
     * @return int
     */
    public function border($left, $right, $top, $bottom, $tl_corner, $tr_corner, $bl_corner, $br_corner) {
        return ncurses_border($left, $right, $top, $bottom, $tl_corner, $tr_corner, $bl_corner, $br_corner);
    }

    /**
     * int ncurses_bottom_panel (resource $panel) - Moves a visible panel to the bottom of the stack
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $panel
     *
     * @return int
     */
    public function bottom_panel($panel) {
        return ncurses_bottom_panel($panel);
    }

    /**
     * bool ncurses_can_change_color (void) - Checks if terminal color definitions can be changed
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return bool
     */
    public function can_change_color() {
        return ncurses_can_change_color();
    }

    /**
     * bool ncurses_clear (void) - Clear screen
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return bool
     */
    public function clear() {
        return ncurses_clear();
    }

    /**
     * bool ncurses_clrtobot (void) - Clear screen from current position to bottom
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return bool
     */
    public function clrtobot() {
        return ncurses_clrtobot();
    }

    /**
     * bool ncurses_clrtoeol (void) - Clear screen from current position to end of line
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return bool
     */
    public function clrtoeol() {
        return ncurses_clrtoeol();
    }

    /**
     * int ncurses_color_content (int $color , int &$r , int &$g , int &$b) - Retrieves RGB components of a color
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $color
     *
     * @return array|bool
     */
    public function color_content($color) {
        $return_value = ncurses_color_content($color, $r, $g, $b);
        if($return_value == false) {
            return false;
        } else {
            return array(
                'r' => $r,
                'g' => $g,
                'b' => $b,
            );
        }
    }

    /**
     * int ncurses_color_set (int $pair) - Set active foreground and background colors
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $pair
     *
     * @return bool
     */
    public function color_set($pair) {
        $return_value = ncurses_color_set($pair);
        if($return_value == -1) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * int ncurses_curs_set (int $visibility) - Set cursor state
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $visibility
     *
     * @return int
     */
    public function curs_set($visibility) {
        return ncurses_curs_set($visibility);
    }

    /**
     * bool ncurses_def_prog_mode (void) - Saves terminals (program) mode
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return bool
     */
    public function def_prog_mode() {
        return ncurses_def_prog_mode();
    }

    /**
     * bool ncurses_def_shell_mode (void) - Saves terminals (shell) mode
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return bool
     */
    public function def_shell_mode() {
        return ncurses_def_shell_mode();
    }

    /**
     * int ncurses_define_key (string $definition , int $keycode) - Define a keycode
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $definition
     * @param $keycode
     *
     * @return int
     */
    public function define_key($definition, $keycode) {
        return ncurses_define_key($definition, $keycode);
    }

    /**
     * bool ncurses_del_panel (resource $panel) - Remove panel from the stack and delete it (but not the associated window)
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $panel
     *
     * @return bool
     */
    public function del_panel($panel) {
        return ncurses_del_panel($panel);
    }

    /**
     * int ncurses_delay_output (int $milliseconds) - Delay output on terminal using padding characters
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $milliseconds
     *
     * @return int
     */
    public function delay_output($milliseconds) {
        return ncurses_delay_output($milliseconds);
    }

    /**
     * bool ncurses_delch (void) - Delete character at current position, move rest of line left
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return bool
     */
    public function delch() {
        return ncurses_delch();
    }

    /**
     * bool ncurses_deleteln (void) - Delete line at current position, move rest of screen up
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return bool
     */
    public function deleteln() {
        return ncurses_deleteln();
    }

    /**
     * bool ncurses_doupdate (void) - Write all prepared refreshes to terminal
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return bool
     */
    public function doupdate() {
        return ncurses_doupdate();
    }

    /**
     * bool ncurses_erase (void) - Erase terminal screen
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return bool
     */
    public function erase() {
        return ncurses_erase();
    }

    /**
     * string ncurses_erasechar (void) - Returns current erase character
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return string
     */
    public function erasechar() {
        return ncurses_erasechar();
    }

    /**
     * void ncurses_filter (void) - Set LINES for iniscr() and newterm() to 1
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     */
    public function filter() {
        return ncurses_filter();
    }

    /**
     * bool ncurses_flushinp (void) - Flush keyboard input buffer
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return bool
     */
    public function flushinp() {
        return ncurses_flushinp();
    }

    /**
     * int ncurses_getch (void) - Read a character from keyboard
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return int
     */
    public function getChar() {
        return ncurses_getch();
    }

    /**
     * bool ncurses_getmouse (array &$mevent) - Reads mouse event
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return bool
     */
    public function getmouse() {
        if(ncurses_getmouse($mevent) === false) {
            array_unshift($mevent, true);

            return $mevent;
        } else {
            return false;
        }
    }

    /**
     * bool ncurses_has_colors (void) - Checks if terminal has color capabilities
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return bool
     */
    public function has_colors() {
        return ncurses_has_colors();
    }

    /**
     * bool ncurses_has_ic (void) - Check for insert- and delete-capabilities
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return bool
     */
    public function has_ic() {
        return ncurses_has_ic();
    }

    /**
     * bool ncurses_has_il (void) - Check for line insert- and delete-capabilities
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return bool
     */
    public function has_il() {
        return ncurses_has_il();
    }

    /**
     * int ncurses_has_key (int $keycode) - Check for presence of a function key on terminal keyboard
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $keycode
     *
     * @return int
     */
    public function has_key($keycode) {
        return ncurses_has_key($keycode);
    }

    /**
     * int ncurses_hide_panel (resource $panel) - Remove panel from the stack, making it invisible
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $panel
     *
     * @return int
     */
    public function hide_panel($panel) {
        return ncurses_hide_panel($panel);
    }

    /**
     * int ncurses_hline (int $charattr , int $n) - Draw a horizontal line at current position using an attributed character and max. n characters long
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $charattr
     * @param $n
     *
     * @return int
     */
    public function hline($charattr, $n) {
        return ncurses_hline($charattr, $n);
    }

    /**
     * string ncurses_inch (void) - Get character and attribute at current position
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return string
     */
    public function inch() {
        return ncurses_inch();
    }

    /**
     * int ncurses_init_color (int $color , int $r , int $g , int $b) - Define a terminal color
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $color
     * @param $r
     * @param $g
     * @param $b
     *
     * @return int
     */
    public function init_color($color, $r, $g, $b) {
        return ncurses_init_color($color, $r, $g, $b);
    }

    /**
     * int ncurses_init_pair (int $pair , int $fg , int $bg) - Define a color pair
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $pair
     * @param $fg
     * @param $bg
     *
     * @return int
     */
    public function init_pair($pair, $fg, $bg) {
        return ncurses_init_pair($pair, $fg, $bg);
    }

    /**
     * int ncurses_insch (int $character) - Insert character moving rest of line including character at current position
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $character
     *
     * @return int
     */
    public function insch($character) {
        return ncurses_insch($character);
    }

    /**
     * int ncurses_insdelln (int $count) - Insert lines before current line scrolling down (negative numbers delete and scroll up)
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $count
     *
     * @return int
     */
    public function insdelln($count) {
        return ncurses_insdelln($count);
    }

    /**
     * int ncurses_insertln (void) - Insert a line, move rest of screen down
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return int
     */
    public function insertln() {
        return ncurses_insertln();
    }

    /**
     * int ncurses_insstr (string $text) - Insert string at current position, moving rest of line right
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $text
     *
     * @return int
     */
    public function insstr($text) {
        return ncurses_insstr($text);
    }

    /**
     * int ncurses_instr (string &$buffer) - Reads string from terminal screen
     *
     * Returns number of characters read as the first element, and buffer read as the second.
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $buffer
     *
     * @return array
     */
    public function instr($buffer) {
        $return_value = ncurses_instr($buffer);

        return array($return_value, $buffer);
    }

    /**
     * bool ncurses_isendwin (void) - Ncurses is in endwin mode, normal screen output may be performed
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return bool
     */
    public function isendwin() {
        return ncurses_isendwin();
    }

    /**
     * int ncurses_keyok (int $keycode , bool $enable) - Enable or disable a keycode
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $keycode
     * @param $enable
     *
     * @return int
     */
    public function keyok($keycode, $enable) {
        return ncurses_keyok($keycode, $enable);
    }

    /**
     * string ncurses_killchar (void) - Returns current line kill character
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return string
     */
    public function killchar() {
        return ncurses_killchar();
    }

    /**
     * string ncurses_longname (void) - Returns terminals description
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return string
     */
    public function longname() {
        return ncurses_longname();
    }

    /**
     * bool ncurses_mouse_trafo (int &$y , int &$x , bool $toscreen) - Transforms coordinates
     * Via http://linux.die.net/man/3/mouse_trafo
     * If the parameter to_screen is TRUE, the pointers pY, pX must reference
     * the coordinates of a location inside the window win. They are converted
     * to window-relative coordinates and returned through the pointers. If the
     * conversion was successful, the function returns TRUE. If one of the
     * parameters was NULL or the location is not inside the window, FALSE is
     * returned. If to_screen is FALSE, the pointers pY, pX must reference window-relative
     * coordinates. They are converted to stdscr-relative coordinates if the window win encloses
     * this point. In this case the function returns TRUE.
     *
     * @param      $y
     * @param      $x
     * @param bool $toscreen
     *
     * @return array
     */
    public function mouse_trafo($y, $x, $toscreen = true) {
        $return_value = ncurses_mouse_trafo($y, $x, $toscreen);
        if($return_value === 0) {
            $return_value = true;
        } else {
            $return_value = false;
        }

        return array(
            0   => $return_value,
            'y' => $y,
            'x' => $x,
        );
    }

    /**
     * int ncurses_mouseinterval (int $milliseconds) - Set timeout for mouse button clicks
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $milliseconds
     *
     * @return int
     */
    public function mouseinterval($milliseconds) {
        return ncurses_mouseinterval($milliseconds);
    }

    /**
     * int ncurses_mousemask (int $newmask , int &$oldmask) - Sets mouse options
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $newmask
     *
     * @return array|bool
     */
    public function mousemask($newmask) {
        $return_value = ncurses_mousemask($newmask, $oldmask);
        if($return_value !== 0) {
            return array($return_value, $oldmask);
        } else {
            return false;
        }
    }

    /**
     * int ncurses_move_panel (resource $panel , int $startx , int $starty) - Moves a panel so that its upper-left corner is at [startx, starty]
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $panel
     * @param $startx
     * @param $starty
     *
     * @return int
     */
    public function move_panel($panel, $startx, $starty) {
        return ncurses_move_panel($panel, $startx, $starty);
    }

    /**
     * int ncurses_move (int $y , int $x) - Move output position
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $y
     * @param $x
     *
     * @return int
     */
    public function move($y, $x) {
        return ncurses_move($y, $x);
    }

    /**
     * int ncurses_mvcur (int $old_y , int $old_x , int $new_y , int $new_x) - Move cursor immediately
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $old_y
     * @param $old_x
     * @param $new_y
     * @param $new_x
     *
     * @return int
     */
    public function mvcur($old_y, $old_x, $new_y, $new_x) {
        return ncurses_mvcur($old_y, $old_x, $new_y, $new_x);
    }

    /**
     * int ncurses_mvdelch (int $y , int $x) - Move position and delete character, shift rest of line left
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $y
     * @param $x
     *
     * @return int
     */
    public function mvdelch($y, $x) {
        return ncurses_mvdelch($y, $x);
    }

    /**
     * int ncurses_mvgetch (int $y , int $x) - Move position and get character at new position
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $y
     * @param $x
     *
     * @return int
     */
    public function mvgetch($y, $x) {
        return ncurses_mvgetch($y, $x);
    }

    /**
     * int ncurses_mvhline (int $y , int $x , int $attrchar , int $n) - Set new position and draw a horizontal line using an attributed character and max. n
     * characters long
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $y
     * @param $x
     * @param $attrchar
     * @param $n
     *
     * @return int
     */
    public function mvhline($y, $x, $attrchar, $n) {
        return ncurses_mvhline($y, $x, $attrchar, $n);
    }

    /**
     * int ncurses_mvinch (int $y , int $x) - Move position and get attributed character at new position
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $y
     * @param $x
     *
     * @return int
     */
    public function mvinch($y, $x) {
        return ncurses_mvinch($y, $x);
    }

    /**
     * int ncurses_mvvline (int $y , int $x , int $attrchar , int $n) - Set new position and draw a vertical line using an attributed character and max. n
     * characters long
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $y
     * @param $x
     * @param $attrchar
     * @param $n
     *
     * @return mixed
     */
    public function mvvline($y, $x, $attrchar, $n) {
        return ncurses_mvvline($y, $x, $attrchar, $n);
    }

    /**
     * int ncurses_napms (int $milliseconds) - Sleep
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $milliseconds
     *
     * @return int
     */
    public function napms($milliseconds) {
        return ncurses_napms($milliseconds);
    }

    /**
     * resource ncurses_newpad (int $rows , int $cols) - Creates a new pad (window)
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $rows
     * @param $cols
     *
     * @return resource
     */
    public function newpad($rows, $cols) {
        return ncurses_newpad($rows, $cols);
    }

    /**
     * bool ncurses_nl (void) - Translate newline and carriage return / line feed
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return bool
     */
    public function nl() {
        return ncurses_nl();
    }

    /**
     * bool ncurses_nonl (void) - Do not translate newline and carriage return / line feed
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return bool
     */
    public function nonl() {
        return ncurses_nonl();
    }

    /**
     * int ncurses_pair_content (int $pair , int &$f , int &$b) - Retrieves foreground and background colors of a color pair
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $pair
     *
     * @return array|bool
     */
    public function pair_content($pair) {
        $return_value = ncurses_pair_content($pair, $f, $b);
        if($return_value == 0) {
            return false;
        } else {
            return array(
                'f' => $f,
                'b' => $b,
            );
        }
    }

    /**
     * resource ncurses_panel_above (resource $panel) - Returns the panel above panel
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $panel
     *
     * @return resource
     */
    public function panel_above($panel) {
        return ncurses_panel_above($panel);
    }

    /**
     * resource ncurses_panel_below (resource $panel) - Returns the panel below panel
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $panel
     *
     * @return resource
     */
    public function panel_below($panel) {
        return ncurses_panel_below($panel);
    }

    /**
     * resource ncurses_panel_window (resource $panel) - Returns the window associated with panel
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $panel
     *
     * @return resource
     */
    public function panel_window($panel) {
        return ncurses_panel_window($panel);
    }

    /**
     * int ncurses_pnoutrefresh (resource $pad , int $pminrow , int $pmincol , int $sminrow , int $smincol , int $smaxrow , int $smaxcol) - Copies a region
     * from a pad into the virtual screen
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $pad
     * @param $pminrow
     * @param $pmincol
     * @param $sminrow
     * @param $smincol
     * @param $smaxrow
     * @param $smaxcol
     *
     * @return int
     */
    public function pnoutrefresh($pad, $pminrow, $pmincol, $sminrow, $smincol, $smaxrow, $smaxcol) {
        return ncurses_pnoutrefresh($pad, $pminrow, $pmincol, $sminrow, $smincol, $smaxrow, $smaxcol);
    }

    /**
     * int ncurses_prefresh (resource $pad , int $pminrow , int $pmincol , int $sminrow , int $smincol , int $smaxrow , int $smaxcol) - Copies a region from a
     * pad into the virtual screen
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $pad
     * @param $pminrow
     * @param $pmincol
     * @param $sminrow
     * @param $smincol
     * @param $smaxrow
     * @param $smaxcol
     *
     * @return int
     */
    public function prefresh($pad, $pminrow, $pmincol, $sminrow, $smincol, $smaxrow, $smaxcol) {
        return ncurses_prefresh($pad, $pminrow, $pmincol, $sminrow, $smincol, $smaxrow, $smaxcol);
    }

    /**
     * int ncurses_putp (string $text) - Apply padding information to the string and output it
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $text
     *
     * @return int
     */
    public function putp($text) {
        return ncurses_putp($text);
    }

    /**
     * int ncurses_refresh (int $ch) - Refresh screen
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $ch
     *
     * @return int
     */
    public function refresh($ch = STDSCR) {
        return ncurses_refresh($ch);
    }

    /**
     * int ncurses_replace_panel (resource $panel , resource $window) - Replaces the window associated with panel
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $panel
     * @param $window
     *
     * @return int
     */
    public function replace_panel($panel, $window) {
        return ncurses_replace_panel($panel, $window);
    }

    /**
     * int ncurses_reset_prog_mode (void) - Resets the prog mode saved by def_prog_mode
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return int
     */
    public function reset_prog_mode() {
        return ncurses_reset_prog_mode();
    }

    /**
     * int ncurses_reset_shell_mode (void) - Resets the shell mode saved by def_shell_mode
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return int
     */
    public function reset_shell_mode() {
        return ncurses_reset_shell_mode();
    }

    /**
     * bool ncurses_resetty (void) - Restores saved terminal state
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return bool
     */
    public function resetty() {
        return ncurses_resetty();
    }

    /**
     * bool ncurses_savetty (void) - Saves terminal state
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return bool
     */
    public function savetty() {
        return ncurses_savetty();
    }

    /**
     * int ncurses_scr_dump (string $filename) - Dump screen content to file
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $filename
     *
     * @return int
     */
    public function scr_dump($filename) {
        return ncurses_scr_dump($filename);
    }

    /**
     * int ncurses_scr_init (string $filename) - Initialize screen from file dump
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $filename
     *
     * @return int
     */
    public function scr_init($filename) {
        return ncurses_scr_init($filename);
    }

    /**
     * int ncurses_scr_restore (string $filename) - Restore screen from file dump
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $filename
     *
     * @return int
     */
    public function scr_restore($filename) {
        return ncurses_scr_restore($filename);
    }

    /**
     * int ncurses_scr_set (string $filename) - Inherit screen from file dump
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $filename
     *
     * @return int
     */
    public function scr_set($filename) {
        return ncurses_scr_set($filename);
    }

    /**
     * int ncurses_scrl (int $count) - Scroll window content up or down without changing current position
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $count
     *
     * @return int
     */
    public function scrl($count) {
        return ncurses_scrl($count);
    }

    /**
     * int ncurses_show_panel (resource $panel) - Places an invisible panel on top of the stack, making it visible
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $panel
     *
     * @return int
     */
    public function show_panel($panel) {
        return ncurses_show_panel($panel);
    }

    /**
     * int ncurses_slk_attr (void) - Returns current soft label key attribute
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return int
     */
    public function slk_attr() {
        return ncurses_slk_attr();
    }

    /**
     * int ncurses_slk_attroff (int $intarg) - Turn off the given attributes for soft function-key labels
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $intarg
     *
     * @return int
     */
    public function slk_attroff($intarg) {
        return ncurses_slk_attroff($intarg);
    }

    /**
     * int ncurses_slk_attron (int $intarg) - Turn on the given attributes for soft function-key labels
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $intarg
     *
     * @return int
     */
    public function slk_attron($intarg) {
        return ncurses_slk_attron($intarg);
    }

    /**
     * int ncurses_slk_attrset (int $intarg) - Set given attributes for soft function-key labels
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $intarg
     *
     * @return int
     */
    public function slk_attrset($intarg) {
        return ncurses_slk_attrset($intarg);
    }

    /**
     * bool ncurses_slk_clear (void) - Clears soft labels from screen
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return bool
     */
    public function slk_clear() {
        return ncurses_slk_clear();
    }

    /**
     * int ncurses_slk_color (int $intarg) - Sets color for soft label keys
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $intarg
     *
     * @return int
     */
    public function slk_color($intarg) {
        return ncurses_slk_color($intarg);
    }

    /**
     * bool ncurses_slk_init (int $format) - Initializes soft label key functions
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $format
     *
     * @return bool
     */
    public function slk_init($format) {
        return ncurses_slk_init($format);
    }

    /**
     * bool ncurses_slk_noutrefresh (void) - Copies soft label keys to virtual screen
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return bool
     */
    public function slk_noutrefresh() {
        return ncurses_slk_noutrefresh();
    }

    /**
     * int ncurses_slk_refresh (void) - Copies soft label keys to screen
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return int
     */
    public function slk_refresh() {
        return ncurses_slk_refresh();
    }

    /**
     * int ncurses_slk_restore (void) - Restores soft label keys
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return int
     */
    public function slk_restore() {
        return ncurses_slk_restore();
    }

    /**
     * bool ncurses_slk_set (int $labelnr , string $label , int $format) - Sets function key labels
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $labelnr
     * @param $label
     * @param $format
     *
     * @return bool
     */
    public function slk_set($labelnr, $label, $format) {
        return ncurses_slk_set($labelnr, $label, $format);
    }

    /**
     * int ncurses_slk_touch (void) - Forces output when ncurses_slk_noutrefresh is performed
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return int
     */
    public function slk_touch() {
        return ncurses_slk_touch();
    }

    /**
     * int ncurses_standend (void) - Stop using "standout" attribute
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return int
     */
    public function standend() {
        return ncurses_standend();
    }

    /**
     * int ncurses_standout (void) - Start using "standout" attribute
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return int
     */
    public function standout() {
        return ncurses_standout();
    }

    /**
     * int ncurses_start_color (void) - Initializes color functionality
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return int
     */
    public function start_color() {
        return ncurses_start_color();
    }

    /**
     * bool ncurses_termattrs (void) - Returns a logical OR of all attribute flags supported by terminal
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return bool
     */
    public function termattrs() {
        return ncurses_termattrs();
    }

    /**
     * string ncurses_termname (void) - Returns terminals (short)-name
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return string
     */
    public function termname() {
        return ncurses_termname();
    }

    /**
     * int ncurses_top_panel (resource $panel) - Moves a visible panel to the top of the stack
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $panel
     *
     * @return int
     */
    public function top_panel($panel) {
        return ncurses_top_panel($panel);
    }

    /**
     * int ncurses_ungetch (int $keycode) - Put a character back into the input stream
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $keycode
     *
     * @return int
     */
    public function ungetch($keycode) {
        return ncurses_ungetch($keycode);
    }

    /**
     * bool ncurses_ungetmouse (array $mevent) - Pushes mouse event to queue
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $mevent
     *
     * @return bool
     */
    public function ungetmouse($mevent) {
        return ncurses_ungetmouse($mevent);
    }

    /**
     * void ncurses_update_panels (void) - Refreshes the virtual screen to reflect the relations between panels in the stack
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     */
    public function update_panels() {
        return ncurses_update_panels();
    }

    /**
     * bool ncurses_use_default_colors (void) - Assign terminal default colors to color id -1
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     * @return bool
     */
    public function use_default_colors() {
        return ncurses_use_default_colors();
    }

    /**
     * void ncurses_use_env (bool $flag) - Control use of environment information about terminal size
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $flag
     */
    public function use_env($flag) {
        return ncurses_use_env($flag);
    }

    /**
     * int ncurses_use_extended_names (bool $flag) - Control use of extended names in terminfo descriptions
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $flag
     *
     * @return int
     */
    public function use_extended_names($flag) {
        return ncurses_use_extended_names($flag);
    }

    /**
     * int ncurses_vidattr (int $intarg) - Display the string on the terminal in the video attribute mode
     *
     * @deprecated: This is an autogenerated method, and is likely to be renamed, or changed in the near future.
     *
     * @param $intarg
     *
     * @return int
     */
    public function vidattr($intarg) {
        return ncurses_vidattr($intarg);
    }

    /**
     * int ncurses_vline (int $charattr , int $n) - Draw a vertical line at current position using an attributed character and max. n characters long
     *
     * @param $charattr
     * @param $n
     *
     * @return int
     */
    public function vline($charattr, $n) {
        return ncurses_vline($charattr, $n);
    }
}

// EOF